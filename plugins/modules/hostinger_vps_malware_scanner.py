#!/usr/bin/python

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.hostinger.vps.plugins.module_utils.headers import get_headers
import requests

DOCUMENTATION = r'''
---
module: hostinger_vps_malware_scanner

short_description: Manage Monarx malware scanner on a Hostinger VPS

description:
  - Installs or uninstalls the Monarx malware scanner for a VPS via Hostinger Public API.
  - Requires a valid Hostinger API token and the virtual machine ID.

options:
  token:
    description: Hostinger API bearer token.
    required: true
    type: str
  virtual_machine_id:
    description: ID of the virtual machine.
    required: true
    type: int
  scanner_action:
    description: Whether to 'install' or 'uninstall' the malware scanner.
    required: true
    type: str
    choices: ['install', 'uninstall']

author:
    - Hostinger Dev Team
'''

EXAMPLES = r'''
- name: Install Monarx scanner on VPS
  hostinger.vps.hostinger_vps_malware_scanner:
    token: "{{ hostinger_token }}"
    virtual_machine_id: 123456
    scanner_action: install

- name: Uninstall Monarx scanner
  hostinger.vps.hostinger_vps_malware_scanner:
    token: "{{ hostinger_token }}"
    virtual_machine_id: 123456
    scanner_action: uninstall
'''

RETURN = r'''
status_code:
  description: HTTP status code from the API call.
  returned: always
  type: int
response:
  description: The full response from the API.
  returned: always
  type: dict
'''

def main():
    module_args = dict(
        token=dict(type='str', required=True, no_log=True),
        virtual_machine_id=dict(type='int', required=True),
        scanner_action=dict(type='str', required=True, choices=['install', 'uninstall']),
    )

    module = AnsibleModule(argument_spec=module_args, supports_check_mode=False)

    token = module.params['token']
    vm_id = module.params['virtual_machine_id']
    action = module.params['scanner_action']

    headers = get_headers(token)

    base_url = "https://developers.hostinger.com"
    endpoint = f"/api/vps/v1/virtual-machines/{vm_id}/monarx"
    url = f"{base_url}{endpoint}"

    try:
        if action == "install":
            response = requests.post(url, headers=headers)
        else:
            response = requests.delete(url, headers=headers)

        response.raise_for_status()
        module.exit_json(
            changed=True,
            status_code=response.status_code,
            response=response.json() if response.content else {}
        )

    except requests.exceptions.HTTPError as errh:
        module.fail_json(msg=f"HTTP error occurred: {errh}", status_code=response.status_code, response=response.text)
    except Exception as e:
        module.fail_json(msg=f"Unexpected error: {e}")

if __name__ == '__main__':
    main()
